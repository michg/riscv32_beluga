./d-decl-decl-3.c:1:5: ERROR - missing identifier
  int *[] = 0;
      ^~~
./d-decl-decl-3.c:2:5: ERROR - missing identifier
  int *[] = { 0, };
      ^~~
./d-decl-decl-3.c:3:5: ERROR - missing identifier
  int * = { { 0, };
      ^
./d-decl-decl-3.c:3:17: ERROR - syntax error; expected `}' before `;'
  int * = { { 0, };
                  ^
./d-decl-decl-3.c:3:9: note - to match this `{'
  int * = { { 0, };
          ^
./d-decl-decl-3.c:4:5: ERROR - missing identifier
  int *[] = { { 0, }, , };
      ^~~
./d-decl-decl-3.c:4:21: ERROR - extra comma or missing initializer
  int *[] = { { 0, }, , };
                      ^
./d-decl-decl-3.c:5:5: ERROR - missing identifier
  int (void) = 1-4*i;
      ^~~~~~
./d-decl-decl-3.c:5:18: ERROR - undeclared identifier `i'
  int (void) = 1-4*i;
                   ^
./d-decl-decl-3.c:6:5: ERROR - missing identifier
  int *(void) = { { 0, { 0, 0, }, } };
      ^~~~~~~
./d-decl-decl-3.c:7:7: ERROR - syntax error; expected `)' before `sizeof'
  int *(sizeof) = (void *)0;
        ^
./d-decl-decl-3.c:7:6: note - to match this `('
  int *(sizeof) = (void *)0;
       ^
./d-decl-decl-3.c:7:5: ERROR - missing identifier
  int *(sizeof) = (void *)0;
      ^~~~~~~~~
./d-decl-decl-3.c:8:5: ERROR - missing identifier
  int *() = p/i;
      ^~~
./d-decl-decl-3.c:8:11: ERROR - undeclared identifier `p'
  int *() = p/i;
            ^
./d-decl-decl-3.c:9:5: ERROR - missing identifier
  int () = i[0] = 0;
      ^~
./d-decl-decl-3.c:10:4: ERROR - empty declaration
  int = 0;
     ^
./d-decl-decl-3.c:11:1: warning - useless storage-class specifier `static'
  static int = { 0, };
  ^~~~~~
./d-decl-decl-3.c:11:11: ERROR - empty declaration
  static int = { 0, };
            ^
./d-decl-decl-3.c:12:8: warning - type defaults to `int'
  static = { 0, };
         ^
./d-decl-decl-3.c:12:1: warning - useless storage-class specifier `static'
  static = { 0, };
  ^~~~~~
./d-decl-decl-3.c:12:7: ERROR - empty declaration
  static = { 0, };
        ^
./d-decl-decl-3.c:13:23: ERROR - useless initializer; nothing to initialize
  struct tag { int x; } = { 0, };
                        ^
./d-decl-decl-3.c:14:5: ERROR - missing enum tag
  enum = 0;
      ^
./d-decl-decl-3.c:14:6: ERROR - useless initializer; nothing to initialize
  enum = 0;
       ^
./d-decl-decl-3.c:15:12: warning - C90 disallows extraneous comma at enumerator list
  enum { A, B, } = { 0 };
             ^
./d-decl-decl-3.c:15:16: ERROR - useless initializer; nothing to initialize
  enum { A, B, } = { 0 };
                 ^
./d-decl-decl-3.c:17:7: ERROR - syntax error; expected `)' before `,'
  int (x, y);
        ^
./d-decl-decl-3.c:17:5: note - to match this `('
  int (x, y);
      ^
./d-decl-decl-3.c:17:6: ERROR - redeclaration of `x': `int' vs `pointer to int'
  int (x, y);
       ^
./d-decl-decl-3.c:16:7: note - previous declaration was here
  int *(x);
        ^
./d-decl-decl-3.c:17:10: ERROR - syntax error; expected `;' before `)'
  int (x, y);
           ^
./d-decl-decl-3.c:18:8: ERROR - syntax error; expected `)' before `,'
  int *(x, y)[];
         ^
./d-decl-decl-3.c:18:6: note - to match this `('
  int *(x, y)[];
       ^
./d-decl-decl-3.c:18:7: ERROR - redeclaration of `x': `pointer to int' vs `int'
  int *(x, y)[];
        ^
./d-decl-decl-3.c:17:6: note - previous declaration was here
  int (x, y);
       ^
./d-decl-decl-3.c:18:11: ERROR - syntax error; expected `;' before `)'
  int *(x, y)[];
            ^
./d-decl-decl-3.c:21:9: ERROR - missing identifier
      int *[] = 0;
          ^~~
./d-decl-decl-3.c:22:9: ERROR - missing identifier
      int *[] = { 0, };
          ^~~
./d-decl-decl-3.c:23:9: ERROR - missing identifier
      int * = { { 0, };
          ^
./d-decl-decl-3.c:23:21: ERROR - syntax error; expected `}' before `;'
      int * = { { 0, };
                      ^
./d-decl-decl-3.c:23:13: note - to match this `{'
      int * = { { 0, };
              ^
./d-decl-decl-3.c:24:9: ERROR - missing identifier
      int *[] = { { 0, }, , };
          ^~~
./d-decl-decl-3.c:24:25: ERROR - extra comma or missing initializer
      int *[] = { { 0, }, , };
                          ^
./d-decl-decl-3.c:25:9: ERROR - missing identifier
      int (void) = 1-4*i;
          ^~~~~~
./d-decl-decl-3.c:26:9: ERROR - missing identifier
      int *(void) = { { 0, { 0, 0, }, } };
          ^~~~~~~
./d-decl-decl-3.c:27:11: ERROR - syntax error; expected `)' before `sizeof'
      int *(sizeof) = (void *)0;
            ^
./d-decl-decl-3.c:27:10: note - to match this `('
      int *(sizeof) = (void *)0;
           ^
./d-decl-decl-3.c:27:9: ERROR - missing identifier
      int *(sizeof) = (void *)0;
          ^~~~~~~~~
./d-decl-decl-3.c:28:9: ERROR - missing identifier
      int *() = p/i;
          ^~~
./d-decl-decl-3.c:29:9: ERROR - missing identifier
      int () = i[0] = 0;
          ^~
./d-decl-decl-3.c:30:8: ERROR - empty declaration
      int = 0;
         ^
./d-decl-decl-3.c:31:5: warning - useless storage-class specifier `static'
      static int = { 0, };
      ^~~~~~
./d-decl-decl-3.c:31:15: ERROR - empty declaration
      static int = { 0, };
                ^
./d-decl-decl-3.c:32:12: warning - type defaults to `int'
      static = { 0, };
             ^
./d-decl-decl-3.c:32:5: warning - useless storage-class specifier `static'
      static = { 0, };
      ^~~~~~
./d-decl-decl-3.c:32:11: ERROR - empty declaration
      static = { 0, };
            ^
./d-decl-decl-3.c:33:27: ERROR - useless initializer; nothing to initialize
      struct tag { int x; } = { 0, };
                            ^
./d-decl-decl-3.c:34:9: ERROR - missing enum tag
      enum = 0;
          ^
./d-decl-decl-3.c:34:10: ERROR - useless initializer; nothing to initialize
      enum = 0;
           ^
./d-decl-decl-3.c:35:12: warning - declaration of `A' hides one declared previously
      enum { A, B, } = { 0 };
             ^
./d-decl-decl-3.c:15:8: note - previous declaration was here
  enum { A, B, } = { 0 };
         ^
./d-decl-decl-3.c:35:15: warning - declaration of `B' hides one declared previously
      enum { A, B, } = { 0 };
                ^
./d-decl-decl-3.c:15:11: note - previous declaration was here
  enum { A, B, } = { 0 };
            ^
./d-decl-decl-3.c:35:16: warning - C90 disallows extraneous comma at enumerator list
      enum { A, B, } = { 0 };
                 ^
./d-decl-decl-3.c:35:20: ERROR - useless initializer; nothing to initialize
      enum { A, B, } = { 0 };
                     ^
./d-decl-decl-3.c:36:11: warning - declaration of `x' hides one declared previously
      int *(x);
            ^
./d-decl-decl-3.c:18:7: note - previous declaration was here
  int *(x, y)[];
        ^
./d-decl-decl-3.c:37:11: ERROR - syntax error; expected `)' before `,'
      int (x, y);
            ^
./d-decl-decl-3.c:37:9: note - to match this `('
      int (x, y);
          ^
./d-decl-decl-3.c:37:10: ERROR - redeclaration of `x'
      int (x, y);
           ^
./d-decl-decl-3.c:36:11: note - previous declaration was here
      int *(x);
            ^
./d-decl-decl-3.c:37:13: warning - declaration of `y' hides one declared previously
      int (x, y);
              ^
./d-decl-decl-3.c:18:10: note - previous declaration was here
  int *(x, y)[];
           ^
./d-decl-decl-3.c:37:14: ERROR - syntax error; expected `;' before `)'
      int (x, y);
               ^
./d-decl-decl-3.c:38:12: ERROR - syntax error; expected `)' before `,'
      int *(x, y)[];
             ^
./d-decl-decl-3.c:38:10: note - to match this `('
      int *(x, y)[];
           ^
./d-decl-decl-3.c:38:11: ERROR - redeclaration of `x'
      int *(x, y)[];
            ^
./d-decl-decl-3.c:37:10: note - previous declaration was here
      int (x, y);
           ^
./d-decl-decl-3.c:38:14: ERROR - redeclaration of `y'
      int *(x, y)[];
               ^
./d-decl-decl-3.c:37:13: note - previous declaration was here
      int (x, y);
              ^
./d-decl-decl-3.c:38:15: ERROR - syntax error; expected `;' before `)'
      int *(x, y)[];
                ^
./d-decl-decl-3.c:41:16: ERROR - initializer is not allowed for parameter
  void g(int *[] = 0,
                 ^
./d-decl-decl-3.c:42:16: ERROR - initializer is not allowed for parameter
         int *[] = { 0, },
                 ^
./d-decl-decl-3.c:43:14: ERROR - initializer is not allowed for parameter
         int * = { 0, },
               ^
./d-decl-decl-3.c:44:16: ERROR - initializer is not allowed for parameter
         int *[] = { { 0, }, , },
                 ^
./d-decl-decl-3.c:44:28: ERROR - extra comma or missing initializer
         int *[] = { { 0, }, , },
                             ^
./d-decl-decl-3.c:45:19: ERROR - initializer is not allowed for parameter
         int (void) = 1-4*i,
                    ^
./d-decl-decl-3.c:46:20: ERROR - initializer is not allowed for parameter
         int *(void) = { { 0, { 0, 0, }, } },
                     ^
./d-decl-decl-3.c:47:14: ERROR - syntax error; expected `)' before `sizeof'
         int *(sizeof) = (void *)0,
               ^
./d-decl-decl-3.c:47:13: note - to match this `('
         int *(sizeof) = (void *)0,
              ^
./d-decl-decl-3.c:47:22: ERROR - initializer is not allowed for parameter
         int *(sizeof) = (void *)0,
                       ^
./d-decl-decl-3.c:47:12: warning - missing prototype from parameter
         int *(sizeof) = (void *)0,
             ^~~~~~~~~
./d-decl-decl-3.c:48:16: ERROR - initializer is not allowed for parameter
         int *() = p/i,
                 ^
./d-decl-decl-3.c:48:12: warning - missing prototype from parameter
         int *() = p/i,
             ^~~
./d-decl-decl-3.c:49:15: ERROR - initializer is not allowed for parameter
         int () = i[0] = 0,
                ^
./d-decl-decl-3.c:49:12: warning - missing prototype from parameter
         int () = i[0] = 0,
             ^~
./d-decl-decl-3.c:50:12: ERROR - initializer is not allowed for parameter
         int = 0,
             ^
./d-decl-decl-3.c:51:8: ERROR - invalid storage class `static'
         static int = { 0, },
         ^~~~~~
./d-decl-decl-3.c:51:19: ERROR - initializer is not allowed for parameter
         static int = { 0, },
                    ^
./d-decl-decl-3.c:52:15: warning - type defaults to `int'
         static = { 0, },
                ^
./d-decl-decl-3.c:52:8: ERROR - invalid storage class `static'
         static = { 0, },
         ^~~~~~
./d-decl-decl-3.c:52:15: ERROR - initializer is not allowed for parameter
         static = { 0, },
                ^
./d-decl-decl-3.c:53:30: ERROR - initializer is not allowed for parameter
         struct tag { int x; } = { 0, },
                               ^
./d-decl-decl-3.c:54:12: ERROR - missing enum tag
         enum = 0,
             ^
./d-decl-decl-3.c:54:13: ERROR - initializer is not allowed for parameter
         enum = 0,
              ^
./d-decl-decl-3.c:55:15: warning - declaration of `A' hides one declared previously
         enum { A, B, } = { 0 },
                ^
./d-decl-decl-3.c:15:8: note - previous declaration was here
  enum { A, B, } = { 0 };
         ^
./d-decl-decl-3.c:55:18: warning - declaration of `B' hides one declared previously
         enum { A, B, } = { 0 },
                   ^
./d-decl-decl-3.c:15:11: note - previous declaration was here
  enum { A, B, } = { 0 };
            ^
./d-decl-decl-3.c:55:19: warning - C90 disallows extraneous comma at enumerator list
         enum { A, B, } = { 0 },
                    ^
./d-decl-decl-3.c:55:23: ERROR - initializer is not allowed for parameter
         enum { A, B, } = { 0 },
                        ^
./d-decl-decl-3.c:56:14: warning - declaration of `x' hides one declared previously
         int *(x),
               ^
./d-decl-decl-3.c:18:7: note - previous declaration was here
  int *(x, y)[];
        ^
./d-decl-decl-3.c:57:14: ERROR - syntax error; expected `)' before `,'
         int (x, y),
               ^
./d-decl-decl-3.c:57:12: note - to match this `('
         int (x, y),
             ^
./d-decl-decl-3.c:57:13: ERROR - redeclaration of `x'
         int (x, y),
              ^
./d-decl-decl-3.c:56:14: note - previous declaration was here
         int *(x),
               ^
./d-decl-decl-3.c:57:15: ERROR - missing parameter type
         int (x, y),
                ^
./d-decl-decl-3.c:57:16: warning - type defaults to `int'
         int (x, y),
                 ^
./d-decl-decl-3.c:57:16: warning - declaration of `y' hides one declared previously
         int (x, y),
                 ^
./d-decl-decl-3.c:18:10: note - previous declaration was here
  int *(x, y)[];
           ^
./d-decl-decl-3.c:57:19: ERROR - missing declarator
         int (x, y),
                    ^
./d-decl-decl-3.c:57:19: ERROR - syntax error; expected `;' before `int'
         int (x, y),
                    ^
./d-decl-decl-3.c:58:15: ERROR - syntax error; expected `)' before `,'
         int *(x, y)[]) {}
                ^
./d-decl-decl-3.c:58:13: note - to match this `('
         int *(x, y)[]) {}
              ^
./d-decl-decl-3.c:58:18: ERROR - syntax error; expected `;' before `)'
         int *(x, y)[]) {}
                   ^
