./d-ty-hasproto.c:1:17: warning - missing prototype from `f'
  struct t1 { int (*f)(); };
                  ^~~~~~
./d-ty-hasproto.c:2:13: warning - missing prototype from parameter
  void f2(int (*)());
              ^~~~~
./d-ty-hasproto.c:3:28: warning - missing prototype from parameter
  struct t3 { void (*f3)(int (*)()); };
                             ^~~~~
./d-ty-hasproto.c:4:28: warning - missing prototype from type name
  void f4(void) { sizeof(int (*)()); }
                             ^~~~~
./d-ty-hasproto.c:4:17: warning - expression result not used
  void f4(void) { sizeof(int (*)()); }
                  ^~~~~~~~~~~~~~~~~
./d-ty-hasproto.c:5:6: warning - missing prototype from `f5'
  void f5();
       ^~~~
./d-ty-hasproto.c:7:6: warning - missing prototype from `f7'
  void f7(a, b) { }
       ^~~~~~~~
./d-ty-hasproto.c:7:12: warning - parameter `b' defined but not referenced
  void f7(a, b) { }
             ^
./d-ty-hasproto.c:7:9: warning - parameter `a' defined but not referenced
  void f7(a, b) { }
          ^
./d-ty-hasproto.c:8:20: warning - parameter `b' defined but not referenced
  void f8(int a, int b) { }
                     ^
./d-ty-hasproto.c:8:13: warning - parameter `a' defined but not referenced
  void f8(int a, int b) { }
              ^
./d-ty-hasproto.c:9:14: warning - missing prototype from `fp_t'
  typedef void (*fp_t)();
               ^~~~~~~~~
./d-ty-hasproto.c:10:1: warning - missing prototype from `x10'
  fp_t x10;
  ^~~~
./d-ty-hasproto.c:12:10: warning - anonymous struct declared in parameter list
  void f12(struct { int (*f)(); } *x);
           ^~~~~~~~
./d-ty-hasproto.c:12:23: warning - missing prototype from `f'
  void f12(struct { int (*f)(); } *x);
                        ^~~~~~
