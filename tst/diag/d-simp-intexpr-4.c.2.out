./d-simp-intexpr-4.c:11:12: warning - conversion between pointer and integer is not portable
      int x1[(int)(void *)0 + 1];
             ^~~~~~~~~~~~~~
./d-simp-intexpr-4.c:11:12: warning - integer constant expression requried for array size
      int x1[(int)(void *)0 + 1];
             ^~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:12:12: warning - conversion between pointer and integer is not portable
      int x2[(int)(char *)0 + 1];
             ^~~~~~~~~~~~~~
./d-simp-intexpr-4.c:12:12: warning - integer constant expression requried for array size
      int x2[(int)(char *)0 + 1];
             ^~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:13:17: warning - conversion between pointer and integer is not portable
      int x3[(int)(char *)1];
                  ^~~~~~~~~
./d-simp-intexpr-4.c:13:12: warning - conversion between pointer and integer is not portable
      int x3[(int)(char *)1];
             ^~~~~~~~~~~~~~
./d-simp-intexpr-4.c:13:12: warning - integer constant expression requried for array size
      int x3[(int)(char *)1];
             ^~~~~~~~~~~~~~
./d-simp-intexpr-4.c:15:12: warning - conversion between pointer and integer is not portable
      int x4[(unsigned)(void *)0 + 1];
             ^~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:15:12: warning - integer constant expression requried for array size
      int x4[(unsigned)(void *)0 + 1];
             ^~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:16:12: warning - conversion between pointer and integer is not portable
      int x5[(unsigned)(char *)0 + 1];
             ^~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:16:12: warning - integer constant expression requried for array size
      int x5[(unsigned)(char *)0 + 1];
             ^~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:17:22: warning - conversion between pointer and integer is not portable
      int x6[(unsigned)(char *)1];
                       ^~~~~~~~~
./d-simp-intexpr-4.c:17:12: warning - conversion between pointer and integer is not portable
      int x6[(unsigned)(char *)1];
             ^~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:17:12: warning - integer constant expression requried for array size
      int x6[(unsigned)(char *)1];
             ^~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:20:13: warning - conversion between pointer and integer is not portable
          A = (char *)1 - (char *)0,
              ^~~~~~~~~
./d-simp-intexpr-4.c:20:13: warning - integer constant expression requried for enum constant
          A = (char *)1 - (char *)0,
              ^~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:21:14: warning - conversion between pointer and integer is not portable
          B = !(char *)1,
               ^~~~~~~~~
./d-simp-intexpr-4.c:21:13: warning - integer constant expression requried for enum constant
          B = !(char *)1,
              ^~~~~~~~~~
./d-simp-intexpr-4.c:22:13: warning - conversion between pointer and integer is not portable
          C = (char *)1 && (char *)0,
              ^~~~~~~~~
./d-simp-intexpr-4.c:22:13: warning - integer constant expression requried for enum constant
          C = (char *)1 && (char *)0,
              ^~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:23:13: warning - conversion between pointer and integer is not portable
          D = (char *)1 || (char *)0,
              ^~~~~~~~~
./d-simp-intexpr-4.c:23:13: warning - integer constant expression requried for enum constant
          D = (char *)1 || (char *)0,
              ^~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:24:13: warning - conversion between pointer and integer is not portable
          E = (char *)1 == (char *)0,
              ^~~~~~~~~
./d-simp-intexpr-4.c:24:13: warning - integer constant expression requried for enum constant
          E = (char *)1 == (char *)0,
              ^~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:25:13: warning - conversion between pointer and integer is not portable
          F = (char *)1 != (char *)0
              ^~~~~~~~~
./d-simp-intexpr-4.c:25:13: warning - integer constant expression requried for enum constant
          F = (char *)1 != (char *)0
              ^~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:29:21: warning - conversion between pointer and integer is not portable
          unsigned  : (char *)1 >  (char *)0;
                      ^~~~~~~~~
./d-simp-intexpr-4.c:29:21: warning - integer constant expression requried for bit-field size
          unsigned  : (char *)1 >  (char *)0;
                      ^~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:30:21: warning - conversion between pointer and integer is not portable
          unsigned b: (char *)1 >= (char *)0;
                      ^~~~~~~~~
./d-simp-intexpr-4.c:30:21: warning - integer constant expression requried for bit-field size
          unsigned b: (char *)1 >= (char *)0;
                      ^~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:34:14: warning - conversion between pointer and integer is not portable
          case (char *)1 <  (char *)0:       break;
               ^~~~~~~~~
./d-simp-intexpr-4.c:34:14: warning - integer constant expression requried for case label
          case (char *)1 <  (char *)0:       break;
               ^~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:35:15: warning - conversion between pointer and integer is not portable
          case ((char *)1 <= (char *)0) + 1: break;
                ^~~~~~~~~
./d-simp-intexpr-4.c:35:14: warning - integer constant expression requried for case label
          case ((char *)1 <= (char *)0) + 1: break;
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:37:15: warning - conversion between pointer and integer is not portable
          case ((void *)1)? 10: 0:            break;
                ^~~~~~~~~
./d-simp-intexpr-4.c:37:14: warning - integer constant expression requried for case label
          case ((void *)1)? 10: 0:            break;
               ^~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:38:14: warning - conversion between pointer and integer is not portable
          case (int)((1)? 0: (void *)0) + 30: break;
               ^~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:38:14: warning - integer constant expression requried for case label
          case (int)((1)? 0: (void *)0) + 30: break;
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:39:14: warning - conversion between pointer and integer is not portable
          case (int)((1)? (void *)0: 0) + 20: break;
               ^~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:39:14: warning - integer constant expression requried for case label
          case (int)((1)? (void *)0: 0) + 20: break;
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:40:24: warning - conversion between pointer and integer is not portable
          case (1)? (int)(void *)70: 0:       break;
                         ^~~~~~~~~~
./d-simp-intexpr-4.c:40:19: warning - conversion between pointer and integer is not portable
          case (1)? (int)(void *)70: 0:       break;
                    ^~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:40:14: warning - integer constant expression requried for case label
          case (1)? (int)(void *)70: 0:       break;
               ^~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:44:14: warning - conversion between pointer and integer is not portable
          case (unsigned)((1)? 0: (void *)0) + 30: break;
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:44:14: warning - integer constant expression requried for case label
          case (unsigned)((1)? 0: (void *)0) + 30: break;
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:45:14: warning - conversion between pointer and integer is not portable
          case (unsigned)((1)? (void *)0: 0) + 20: break;
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:45:14: warning - integer constant expression requried for case label
          case (unsigned)((1)? (void *)0: 0) + 20: break;
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:46:29: warning - conversion between pointer and integer is not portable
          case (1)? (unsigned)(void *)70: 0:       break;
                              ^~~~~~~~~~
./d-simp-intexpr-4.c:46:19: warning - conversion between pointer and integer is not portable
          case (1)? (unsigned)(void *)70: 0:       break;
                    ^~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:46:14: warning - integer constant expression requried for case label
          case (1)? (unsigned)(void *)70: 0:       break;
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:50:17: warning - conversion between pointer and integer is not portable
          int y1[((unsigned)(&((struct m *)0)->y))];    /* offsetof */
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:50:16: warning - integer constant expression requried for array size
          int y1[((unsigned)(&((struct m *)0)->y))];    /* offsetof */
                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:51:17: warning - conversion between pointer and integer is not portable
          int y2[((int)(&((struct m *)0)->y))];         /* offsetof */
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:51:16: warning - integer constant expression requried for array size
          int y2[((int)(&((struct m *)0)->y))];         /* offsetof */
                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:51:13: warning - local `y2' defined but not referenced
          int y2[((int)(&((struct m *)0)->y))];         /* offsetof */
              ^~
./d-simp-intexpr-4.c:50:13: warning - local `y1' defined but not referenced
          int y1[((unsigned)(&((struct m *)0)->y))];    /* offsetof */
              ^~
./d-simp-intexpr-4.c:17:9: warning - local `x6' defined but not referenced
      int x6[(unsigned)(char *)1];
          ^~
./d-simp-intexpr-4.c:16:9: warning - local `x5' defined but not referenced
      int x5[(unsigned)(char *)0 + 1];
          ^~
./d-simp-intexpr-4.c:15:9: warning - local `x4' defined but not referenced
      int x4[(unsigned)(void *)0 + 1];
          ^~
./d-simp-intexpr-4.c:13:9: warning - local `x3' defined but not referenced
      int x3[(int)(char *)1];
          ^~
./d-simp-intexpr-4.c:12:9: warning - local `x2' defined but not referenced
      int x2[(int)(char *)0 + 1];
          ^~
./d-simp-intexpr-4.c:11:9: warning - local `x1' defined but not referenced
      int x1[(int)(void *)0 + 1];
          ^~
./d-simp-intexpr-4.c:60:12: warning - conversion between pointer and integer is not portable
      int x1[(int)(void *)0 + (int)&q];
             ^~~~~~~~~~~~~~
./d-simp-intexpr-4.c:60:29: warning - conversion between pointer and integer is not portable
      int x1[(int)(void *)0 + (int)&q];
                              ^~~~~~~
./d-simp-intexpr-4.c:60:12: ERROR - integer constant expression required for array size
      int x1[(int)(void *)0 + (int)&q];
             ^~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:61:12: warning - conversion between pointer and integer is not portable
      int x2[(int)&q + (int)(char *)0];
             ^~~~~~~
./d-simp-intexpr-4.c:61:22: warning - conversion between pointer and integer is not portable
      int x2[(int)&q + (int)(char *)0];
                       ^~~~~~~~~~~~~~
./d-simp-intexpr-4.c:61:12: ERROR - integer constant expression required for array size
      int x2[(int)&q + (int)(char *)0];
             ^~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:62:17: warning - conversion between pointer and integer is not portable
      int x3[(int)(char *)1 + (int)&q];
                  ^~~~~~~~~
./d-simp-intexpr-4.c:62:12: warning - conversion between pointer and integer is not portable
      int x3[(int)(char *)1 + (int)&q];
             ^~~~~~~~~~~~~~
./d-simp-intexpr-4.c:62:29: warning - conversion between pointer and integer is not portable
      int x3[(int)(char *)1 + (int)&q];
                              ^~~~~~~
./d-simp-intexpr-4.c:62:12: ERROR - integer constant expression required for array size
      int x3[(int)(char *)1 + (int)&q];
             ^~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:64:12: warning - conversion between pointer and integer is not portable
      int x4[(unsigned)(void *)0 + (unsigned)&q];
             ^~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:64:34: warning - conversion between pointer and integer is not portable
      int x4[(unsigned)(void *)0 + (unsigned)&q];
                                   ^~~~~~~~~~~~
./d-simp-intexpr-4.c:64:12: ERROR - integer constant expression required for array size
      int x4[(unsigned)(void *)0 + (unsigned)&q];
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:65:12: warning - conversion between pointer and integer is not portable
      int x5[(unsigned)&q + (unsigned)(char *)0];
             ^~~~~~~~~~~~
./d-simp-intexpr-4.c:65:27: warning - conversion between pointer and integer is not portable
      int x5[(unsigned)&q + (unsigned)(char *)0];
                            ^~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:65:12: ERROR - integer constant expression required for array size
      int x5[(unsigned)&q + (unsigned)(char *)0];
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:66:22: warning - conversion between pointer and integer is not portable
      int x6[(unsigned)(char *)1 + (unsigned)&q];
                       ^~~~~~~~~
./d-simp-intexpr-4.c:66:12: warning - conversion between pointer and integer is not portable
      int x6[(unsigned)(char *)1 + (unsigned)&q];
             ^~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:66:34: warning - conversion between pointer and integer is not portable
      int x6[(unsigned)(char *)1 + (unsigned)&q];
                                   ^~~~~~~~~~~~
./d-simp-intexpr-4.c:66:12: ERROR - integer constant expression required for array size
      int x6[(unsigned)(char *)1 + (unsigned)&q];
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:69:13: warning - conversion between pointer and integer is not portable
          A = (char *)1 - (char *)&q,
              ^~~~~~~~~
./d-simp-intexpr-4.c:69:13: ERROR - integer constant expression required for enum constant
          A = (char *)1 - (char *)&q,
              ^~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:70:13: warning - address of `q' always results in true
          B = &q && (char *)0,
              ^~
./d-simp-intexpr-4.c:70:13: warning - integer constant expression requried for enum constant
          B = &q && (char *)0,
              ^~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:71:26: warning - address of `q' always results in true
          C = (char *)0 && &q,
                           ^~
./d-simp-intexpr-4.c:71:13: warning - integer constant expression requried for enum constant
          C = (char *)0 && &q,
              ^~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:72:13: warning - conversion between pointer and integer is not portable
          D = (char *)1 || &q,
              ^~~~~~~~~
./d-simp-intexpr-4.c:72:26: warning - address of `q' always results in true
          D = (char *)1 || &q,
                           ^~
./d-simp-intexpr-4.c:72:13: warning - integer constant expression requried for enum constant
          D = (char *)1 || &q,
              ^~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:73:19: warning - conversion between pointer and integer is not portable
          E = &q || (char *)1,
                    ^~~~~~~~~
./d-simp-intexpr-4.c:73:13: warning - address of `q' always results in true
          E = &q || (char *)1,
              ^~
./d-simp-intexpr-4.c:73:13: warning - integer constant expression requried for enum constant
          E = &q || (char *)1,
              ^~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:74:24: warning - address of `q' always results in true
          F = (char *)&q == (char *)0,
                       ~ ^~
./d-simp-intexpr-4.c:74:13: warning - integer constant expression requried for enum constant
          F = (char *)&q == (char *)0,
              ^~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:75:13: warning - conversion between pointer and integer is not portable
          G = (char *)1 != (char *)&q
              ^~~~~~~~~
./d-simp-intexpr-4.c:75:13: ERROR - integer constant expression required for enum constant
          G = (char *)1 != (char *)&q
              ^~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:79:21: ERROR - integer constant expression required for bit-field size
          unsigned  : (char *)&q >  (char *)0;
                      ^~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:80:21: warning - conversion between pointer and integer is not portable
          unsigned b: (char *)1  >= (char *)&q;
                      ^~~~~~~~~
./d-simp-intexpr-4.c:80:21: ERROR - integer constant expression required for bit-field size
          unsigned b: (char *)1  >= (char *)&q;
                      ^~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:84:25: warning - comparison always results in false
          case (char *)&q <  (char *)0: break;
                          ^  ~~~~~~~~~
./d-simp-intexpr-4.c:84:14: ERROR - integer constant expression required for case label
          case (char *)&q <  (char *)0: break;
               ^~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:85:14: warning - conversion between pointer and integer is not portable
          case (char *)1  <= (char *)&q: break;
               ^~~~~~~~~
./d-simp-intexpr-4.c:85:14: ERROR - integer constant expression required for case label
          case (char *)1  <= (char *)&q: break;
               ^~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:87:14: warning - conversion between pointer and integer is not portable
          case (int)((1)? &q: (void *)0):     break;
               ^~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:87:14: ERROR - integer constant expression required for case label
          case (int)((1)? &q: (void *)0):     break;
               ^~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:88:14: warning - conversion between pointer and integer is not portable
          case (int)((1)? (void *)0: &q):     break;
               ^~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:88:14: warning - integer constant expression requried for case label
          case (int)((1)? (void *)0: &q):     break;
               ^~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:89:24: warning - conversion between pointer and integer is not portable
          case (1)? (int)(void *)70: (int)&q: break;
                         ^~~~~~~~~~
./d-simp-intexpr-4.c:89:19: warning - conversion between pointer and integer is not portable
          case (1)? (int)(void *)70: (int)&q: break;
                    ^~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:89:36: warning - conversion between pointer and integer is not portable
          case (1)? (int)(void *)70: (int)&q: break;
                                     ^~~~~~~
./d-simp-intexpr-4.c:89:14: warning - integer constant expression requried for case label
          case (1)? (int)(void *)70: (int)&q: break;
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:93:14: warning - conversion between pointer and integer is not portable
          case (unsigned)((1)? &q: (void *)0):          break;
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:93:14: ERROR - integer constant expression required for case label
          case (unsigned)((1)? &q: (void *)0):          break;
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:94:14: warning - conversion between pointer and integer is not portable
          case (unsigned)((1)? (void *)0: &q):          break;
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:94:14: warning - integer constant expression requried for case label
          case (unsigned)((1)? (void *)0: &q):          break;
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:95:29: warning - conversion between pointer and integer is not portable
          case (1)? (unsigned)(void *)70: (unsigned)&q: break;
                              ^~~~~~~~~~
./d-simp-intexpr-4.c:95:19: warning - conversion between pointer and integer is not portable
          case (1)? (unsigned)(void *)70: (unsigned)&q: break;
                    ^~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:95:41: warning - conversion between pointer and integer is not portable
          case (1)? (unsigned)(void *)70: (unsigned)&q: break;
                                          ^~~~~~~~~~~~
./d-simp-intexpr-4.c:95:14: warning - integer constant expression requried for case label
          case (1)? (unsigned)(void *)70: (unsigned)&q: break;
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:104:12: warning - conversion between pointer and integer is not portable
      int x1[(int)&q];
             ^~~~~~~
./d-simp-intexpr-4.c:104:12: ERROR - integer constant expression required for array size
      int x1[(int)&q];
             ^~~~~~~
./d-simp-intexpr-4.c:105:12: warning - conversion between pointer and integer is not portable
      int x2[(int)&q];
             ^~~~~~~
./d-simp-intexpr-4.c:105:12: ERROR - integer constant expression required for array size
      int x2[(int)&q];
             ^~~~~~~
./d-simp-intexpr-4.c:106:12: warning - conversion between pointer and integer is not portable
      int x3[(int)&q];
             ^~~~~~~
./d-simp-intexpr-4.c:106:12: ERROR - integer constant expression required for array size
      int x3[(int)&q];
             ^~~~~~~
./d-simp-intexpr-4.c:108:12: warning - conversion between pointer and integer is not portable
      int x4[(unsigned)&q];
             ^~~~~~~~~~~~
./d-simp-intexpr-4.c:108:12: ERROR - integer constant expression required for array size
      int x4[(unsigned)&q];
             ^~~~~~~~~~~~
./d-simp-intexpr-4.c:109:12: warning - conversion between pointer and integer is not portable
      int x5[(unsigned)&q];
             ^~~~~~~~~~~~
./d-simp-intexpr-4.c:109:12: ERROR - integer constant expression required for array size
      int x5[(unsigned)&q];
             ^~~~~~~~~~~~
./d-simp-intexpr-4.c:110:12: warning - conversion between pointer and integer is not portable
      int x6[(unsigned)&q];
             ^~~~~~~~~~~~
./d-simp-intexpr-4.c:110:12: ERROR - integer constant expression required for array size
      int x6[(unsigned)&q];
             ^~~~~~~~~~~~
./d-simp-intexpr-4.c:113:13: ERROR - integer constant expression required for enum constant
          A = &q - &q,
              ^~~~~~~
./d-simp-intexpr-4.c:114:14: warning - address of `q' always results in true
          B = !&q,
               ^~
./d-simp-intexpr-4.c:114:13: warning - integer constant expression requried for enum constant
          B = !&q,
              ^~~
./d-simp-intexpr-4.c:115:19: warning - address of `q' always results in true
          C = &q && &q,
                    ^~
./d-simp-intexpr-4.c:115:13: warning - address of `q' always results in true
          C = &q && &q,
              ^~
./d-simp-intexpr-4.c:115:13: warning - integer constant expression requried for enum constant
          C = &q && &q,
              ^~~~~~~~
./d-simp-intexpr-4.c:116:19: warning - address of `q' always results in true
          D = &q || &q,
                    ^~
./d-simp-intexpr-4.c:116:13: warning - address of `q' always results in true
          D = &q || &q,
              ^~
./d-simp-intexpr-4.c:116:13: warning - integer constant expression requried for enum constant
          D = &q || &q,
              ^~~~~~~~
./d-simp-intexpr-4.c:117:13: ERROR - integer constant expression required for enum constant
          E = &q == &q,
              ^~~~~~~~
./d-simp-intexpr-4.c:118:13: ERROR - integer constant expression required for enum constant
          F = &q != &q
              ^~~~~~~~
./d-simp-intexpr-4.c:122:21: ERROR - integer constant expression required for bit-field size
          unsigned  : &q >  &q;
                      ^~~~~~~~
./d-simp-intexpr-4.c:123:21: ERROR - integer constant expression required for bit-field size
          unsigned b: &q >= &q;
                      ^~~~~~~~
./d-simp-intexpr-4.c:127:14: ERROR - integer constant expression required for case label
          case &q <  &q: break;
               ^~~~~~~~
./d-simp-intexpr-4.c:128:14: ERROR - integer constant expression required for case label
          case &q <= &q: break;
               ^~~~~~~~
./d-simp-intexpr-4.c:130:14: warning - address of `q' always results in true
          case (&q)? 10: 0:       break;
               ^~~~
./d-simp-intexpr-4.c:130:14: ERROR - integer constant expression required for case label
          case (&q)? 10: 0:       break;
               ^~~~~~~~~~~
./d-simp-intexpr-4.c:131:14: warning - conversion between pointer and integer is not portable
          case (int)((1)? 0: &q): break;
               ^~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:131:14: warning - integer constant expression requried for case label
          case (int)((1)? 0: &q): break;
               ^~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:132:14: warning - conversion between pointer and integer is not portable
          case (int)((1)? &q: 0): break;
               ^~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:132:14: ERROR - integer constant expression required for case label
          case (int)((1)? &q: 0): break;
               ^~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:133:19: warning - conversion between pointer and integer is not portable
          case (1)? (int)&q: 0:   break;
                    ^~~~~~~
./d-simp-intexpr-4.c:133:14: ERROR - integer constant expression required for case label
          case (1)? (int)&q: 0:   break;
               ^~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:137:14: warning - conversion between pointer and integer is not portable
          case (unsigned)((1)? 0: &q): break;
               ^~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:137:14: warning - integer constant expression requried for case label
          case (unsigned)((1)? 0: &q): break;
               ^~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:138:14: warning - conversion between pointer and integer is not portable
          case (unsigned)((1)? &q: 0): break;
               ^~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:138:14: ERROR - integer constant expression required for case label
          case (unsigned)((1)? &q: 0): break;
               ^~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-4.c:139:19: warning - conversion between pointer and integer is not portable
          case (1)? (unsigned)&q: 0:   break;
                    ^~~~~~~~~~~~
./d-simp-intexpr-4.c:139:14: ERROR - integer constant expression required for case label
          case (1)? (unsigned)&q: 0:   break;
               ^~~~~~~~~~~~~~~~~~~~
