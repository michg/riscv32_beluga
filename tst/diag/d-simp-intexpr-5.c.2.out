./d-simp-intexpr-5.c:14:19: warning - conversion between pointer and integer is not portable
      int x3[sizeof((char *)1)];
                    ^~~~~~~~~
./d-simp-intexpr-5.c:17:20: warning - conversion between pointer and integer is not portable
          A = sizeof((char *)1 - (char *)0),
                     ^~~~~~~~~
./d-simp-intexpr-5.c:18:21: warning - conversion between pointer and integer is not portable
          B = sizeof(!(char *)1),
                      ^~~~~~~~~
./d-simp-intexpr-5.c:19:20: warning - conversion between pointer and integer is not portable
          C = sizeof((char *)1 && (char *)0),
                     ^~~~~~~~~
./d-simp-intexpr-5.c:20:20: warning - conversion between pointer and integer is not portable
          D = sizeof((char *)1 || (char *)0),
                     ^~~~~~~~~
./d-simp-intexpr-5.c:21:20: warning - conversion between pointer and integer is not portable
          E = sizeof((char *)1 == (char *)0),
                     ^~~~~~~~~
./d-simp-intexpr-5.c:22:20: warning - conversion between pointer and integer is not portable
          F = sizeof((char *)1 != (char *)0)
                     ^~~~~~~~~
./d-simp-intexpr-5.c:26:28: warning - conversion between pointer and integer is not portable
          unsigned  : sizeof((char *)1 >  (char *)0);
                             ^~~~~~~~~
./d-simp-intexpr-5.c:27:28: warning - conversion between pointer and integer is not portable
          unsigned b: sizeof((char *)1 >= (char *)0);
                             ^~~~~~~~~
./d-simp-intexpr-5.c:31:21: warning - conversion between pointer and integer is not portable
          case sizeof((char *)1 <  (char *)0):      break;
                      ^~~~~~~~~
./d-simp-intexpr-5.c:32:21: warning - conversion between pointer and integer is not portable
          case sizeof((char *)1 <= (char *)0) + 10: break;
                      ^~~~~~~~~
./d-simp-intexpr-5.c:34:22: warning - conversion between pointer and integer is not portable
          case sizeof(((void *)1)? 10: 0) + 20:           break;
                       ^~~~~~~~~
./d-simp-intexpr-5.c:37:31: warning - conversion between pointer and integer is not portable
          case sizeof((1)? (int)(void *)70: 0) + 50:      break;
                                ^~~~~~~~~~
./d-simp-intexpr-5.c:37:26: warning - conversion between pointer and integer is not portable
          case sizeof((1)? (int)(void *)70: 0) + 50:      break;
                           ^~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:38:36: warning - conversion between pointer and integer is not portable
          case sizeof((1)? (unsigned)(void *)70: 0) + 60: break;
                                     ^~~~~~~~~~
./d-simp-intexpr-5.c:38:26: warning - conversion between pointer and integer is not portable
          case sizeof((1)? (unsigned)(void *)70: 0) + 60: break;
                           ^~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:42:23: warning - conversion between pointer and integer is not portable
          int y1[sizeof((unsigned)(&((struct m *)0)->y))];    /* offsetof */
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:43:23: warning - conversion between pointer and integer is not portable
          int y2[sizeof((int)(&((struct m *)0)->y))];         /* offsetof */
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:43:13: warning - local `y2' defined but not referenced
          int y2[sizeof((int)(&((struct m *)0)->y))];         /* offsetof */
              ^~
./d-simp-intexpr-5.c:42:13: warning - local `y1' defined but not referenced
          int y1[sizeof((unsigned)(&((struct m *)0)->y))];    /* offsetof */
              ^~
./d-simp-intexpr-5.c:14:9: warning - local `x3' defined but not referenced
      int x3[sizeof((char *)1)];
          ^~
./d-simp-intexpr-5.c:13:9: warning - local `x2' defined but not referenced
      int x2[sizeof((char *)0)];
          ^~
./d-simp-intexpr-5.c:12:9: warning - local `x1' defined but not referenced
      int x1[sizeof((void *)0)];
          ^~
./d-simp-intexpr-5.c:52:24: warning - conversion between pointer and integer is not portable
      int x1[sizeof(int [(int)(void *)0 + 1])];
                         ^~~~~~~~~~~~~~
./d-simp-intexpr-5.c:52:24: warning - integer constant expression requried for array size
      int x1[sizeof(int [(int)(void *)0 + 1])];
                         ^~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:53:24: warning - conversion between pointer and integer is not portable
      int x2[sizeof(int [(int)(char *)0 + 2])];
                         ^~~~~~~~~~~~~~
./d-simp-intexpr-5.c:53:24: warning - integer constant expression requried for array size
      int x2[sizeof(int [(int)(char *)0 + 2])];
                         ^~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:54:29: warning - conversion between pointer and integer is not portable
      int x3[sizeof(int [(int)(char *)1])];
                              ^~~~~~~~~
./d-simp-intexpr-5.c:54:24: warning - conversion between pointer and integer is not portable
      int x3[sizeof(int [(int)(char *)1])];
                         ^~~~~~~~~~~~~~
./d-simp-intexpr-5.c:54:24: warning - integer constant expression requried for array size
      int x3[sizeof(int [(int)(char *)1])];
                         ^~~~~~~~~~~~~~
./d-simp-intexpr-5.c:56:24: warning - conversion between pointer and integer is not portable
      int x4[sizeof(int [(unsigned)(void *)0 + 1])];
                         ^~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:56:24: warning - integer constant expression requried for array size
      int x4[sizeof(int [(unsigned)(void *)0 + 1])];
                         ^~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:57:24: warning - conversion between pointer and integer is not portable
      int x5[sizeof(int [(unsigned)(char *)0 + 2])];
                         ^~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:57:24: warning - integer constant expression requried for array size
      int x5[sizeof(int [(unsigned)(char *)0 + 2])];
                         ^~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:58:34: warning - conversion between pointer and integer is not portable
      int x6[sizeof(int [(unsigned)(char *)1])];
                                   ^~~~~~~~~
./d-simp-intexpr-5.c:58:24: warning - conversion between pointer and integer is not portable
      int x6[sizeof(int [(unsigned)(char *)1])];
                         ^~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:58:24: warning - integer constant expression requried for array size
      int x6[sizeof(int [(unsigned)(char *)1])];
                         ^~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:61:25: warning - conversion between pointer and integer is not portable
          A = sizeof(int [(char *)1 - (char *)0]),
                          ^~~~~~~~~
./d-simp-intexpr-5.c:61:25: warning - integer constant expression requried for array size
          A = sizeof(int [(char *)1 - (char *)0]),
                          ^~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:62:27: warning - conversion between pointer and integer is not portable
          B = sizeof(int [!!(char *)1]),
                            ^~~~~~~~~
./d-simp-intexpr-5.c:62:25: warning - integer constant expression requried for array size
          B = sizeof(int [!!(char *)1]),
                          ^~~~~~~~~~~
./d-simp-intexpr-5.c:63:26: warning - conversion between pointer and integer is not portable
          C = sizeof(int [((char *)1 && (char *)0)+1]),
                           ^~~~~~~~~
./d-simp-intexpr-5.c:63:25: warning - integer constant expression requried for array size
          C = sizeof(int [((char *)1 && (char *)0)+1]),
                          ^~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:64:25: warning - conversion between pointer and integer is not portable
          D = sizeof(int [(char *)1 || (char *)0]),
                          ^~~~~~~~~
./d-simp-intexpr-5.c:64:25: warning - integer constant expression requried for array size
          D = sizeof(int [(char *)1 || (char *)0]),
                          ^~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:65:26: warning - conversion between pointer and integer is not portable
          E = sizeof(int [((char *)1 == (char *)0)+1]),
                           ^~~~~~~~~
./d-simp-intexpr-5.c:65:25: warning - integer constant expression requried for array size
          E = sizeof(int [((char *)1 == (char *)0)+1]),
                          ^~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:66:25: warning - conversion between pointer and integer is not portable
          F = sizeof(int [(char *)1 != (char *)0])
                          ^~~~~~~~~
./d-simp-intexpr-5.c:66:25: warning - integer constant expression requried for array size
          F = sizeof(int [(char *)1 != (char *)0])
                          ^~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:70:33: warning - conversion between pointer and integer is not portable
          unsigned  : sizeof(int [(char *)1 >  (char *)0]);
                                  ^~~~~~~~~
./d-simp-intexpr-5.c:70:33: warning - integer constant expression requried for array size
          unsigned  : sizeof(int [(char *)1 >  (char *)0]);
                                  ^~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:71:33: warning - conversion between pointer and integer is not portable
          unsigned b: sizeof(int [(char *)1 >= (char *)0]);
                                  ^~~~~~~~~
./d-simp-intexpr-5.c:71:33: warning - integer constant expression requried for array size
          unsigned b: sizeof(int [(char *)1 >= (char *)0]);
                                  ^~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:75:27: warning - conversion between pointer and integer is not portable
          case sizeof(int [((char *)1 <  (char *)0)+1]):      break;
                            ^~~~~~~~~
./d-simp-intexpr-5.c:75:26: warning - integer constant expression requried for array size
          case sizeof(int [((char *)1 <  (char *)0)+1]):      break;
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:76:27: warning - conversion between pointer and integer is not portable
          case sizeof(int [((char *)1 <= (char *)0)+1]) + 10: break;
                            ^~~~~~~~~
./d-simp-intexpr-5.c:76:26: warning - integer constant expression requried for array size
          case sizeof(int [((char *)1 <= (char *)0)+1]) + 10: break;
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:78:27: warning - conversion between pointer and integer is not portable
          case sizeof(int [((void *)1)? 10: 0]) + 20:           break;
                            ^~~~~~~~~
./d-simp-intexpr-5.c:78:26: warning - integer constant expression requried for array size
          case sizeof(int [((void *)1)? 10: 0]) + 20:           break;
                           ^~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:79:27: warning - conversion between pointer and integer is not portable
          case sizeof(int [((int)((1)? 0: (void *)0))+1]) + 30: break;
                            ^~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:79:26: warning - integer constant expression requried for array size
          case sizeof(int [((int)((1)? 0: (void *)0))+1]) + 30: break;
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:80:27: warning - conversion between pointer and integer is not portable
          case sizeof(int [((int)((1)? (void *)0: 0))+1]) + 40: break;
                            ^~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:80:26: warning - integer constant expression requried for array size
          case sizeof(int [((int)((1)? (void *)0: 0))+1]) + 40: break;
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:81:36: warning - conversion between pointer and integer is not portable
          case sizeof(int [(1)? (int)(void *)70: 0]) + 50:      break;
                                     ^~~~~~~~~~
./d-simp-intexpr-5.c:81:31: warning - conversion between pointer and integer is not portable
          case sizeof(int [(1)? (int)(void *)70: 0]) + 50:      break;
                                ^~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:81:26: warning - integer constant expression requried for array size
          case sizeof(int [(1)? (int)(void *)70: 0]) + 50:      break;
                           ^~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:85:27: warning - conversion between pointer and integer is not portable
          case sizeof(int [((unsigned)((1)? 0: (void *)0))+1]) + 30: break;
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:85:26: warning - integer constant expression requried for array size
          case sizeof(int [((unsigned)((1)? 0: (void *)0))+1]) + 30: break;
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:86:27: warning - conversion between pointer and integer is not portable
          case sizeof(int [((unsigned)((1)? (void *)0: 0))+1]) + 40: break;
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:86:26: warning - integer constant expression requried for array size
          case sizeof(int [((unsigned)((1)? (void *)0: 0))+1]) + 40: break;
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:87:41: warning - conversion between pointer and integer is not portable
          case sizeof(int [(1)? (unsigned)(void *)70: 0]) + 50:      break;
                                          ^~~~~~~~~~
./d-simp-intexpr-5.c:87:31: warning - conversion between pointer and integer is not portable
          case sizeof(int [(1)? (unsigned)(void *)70: 0]) + 50:      break;
                                ^~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:87:26: warning - integer constant expression requried for array size
          case sizeof(int [(1)? (unsigned)(void *)70: 0]) + 50:      break;
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:91:28: warning - conversion between pointer and integer is not portable
          int y1[sizeof(int [(unsigned)(&((struct m *)0)->y)])];    /* offsetof */
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:91:28: warning - integer constant expression requried for array size
          int y1[sizeof(int [(unsigned)(&((struct m *)0)->y)])];    /* offsetof */
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:92:28: warning - conversion between pointer and integer is not portable
          int y2[sizeof(int [(int)(&((struct m *)0)->y)])];         /* offsetof */
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:92:28: warning - integer constant expression requried for array size
          int y2[sizeof(int [(int)(&((struct m *)0)->y)])];         /* offsetof */
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:92:13: warning - local `y2' defined but not referenced
          int y2[sizeof(int [(int)(&((struct m *)0)->y)])];         /* offsetof */
              ^~
./d-simp-intexpr-5.c:91:13: warning - local `y1' defined but not referenced
          int y1[sizeof(int [(unsigned)(&((struct m *)0)->y)])];    /* offsetof */
              ^~
./d-simp-intexpr-5.c:58:9: warning - local `x6' defined but not referenced
      int x6[sizeof(int [(unsigned)(char *)1])];
          ^~
./d-simp-intexpr-5.c:57:9: warning - local `x5' defined but not referenced
      int x5[sizeof(int [(unsigned)(char *)0 + 2])];
          ^~
./d-simp-intexpr-5.c:56:9: warning - local `x4' defined but not referenced
      int x4[sizeof(int [(unsigned)(void *)0 + 1])];
          ^~
./d-simp-intexpr-5.c:54:9: warning - local `x3' defined but not referenced
      int x3[sizeof(int [(int)(char *)1])];
          ^~
./d-simp-intexpr-5.c:53:9: warning - local `x2' defined but not referenced
      int x2[sizeof(int [(int)(char *)0 + 2])];
          ^~
./d-simp-intexpr-5.c:52:9: warning - local `x1' defined but not referenced
      int x1[sizeof(int [(int)(void *)0 + 1])];
          ^~
./d-simp-intexpr-5.c:101:24: warning - conversion between pointer and integer is not portable
      int x1[sizeof(int [(int)(void *)0 + 1]) + (int)(void *)0];
                         ^~~~~~~~~~~~~~
./d-simp-intexpr-5.c:101:24: warning - integer constant expression requried for array size
      int x1[sizeof(int [(int)(void *)0 + 1]) + (int)(void *)0];
                         ^~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:101:47: warning - conversion between pointer and integer is not portable
      int x1[sizeof(int [(int)(void *)0 + 1]) + (int)(void *)0];
                                                ^~~~~~~~~~~~~~
./d-simp-intexpr-5.c:101:12: warning - integer constant expression requried for array size
      int x1[sizeof(int [(int)(void *)0 + 1]) + (int)(void *)0];
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:102:24: warning - conversion between pointer and integer is not portable
      int x2[sizeof(int [(int)(char *)0 + 2]) + (int)(char *)0];
                         ^~~~~~~~~~~~~~
./d-simp-intexpr-5.c:102:24: warning - integer constant expression requried for array size
      int x2[sizeof(int [(int)(char *)0 + 2]) + (int)(char *)0];
                         ^~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:102:47: warning - conversion between pointer and integer is not portable
      int x2[sizeof(int [(int)(char *)0 + 2]) + (int)(char *)0];
                                                ^~~~~~~~~~~~~~
./d-simp-intexpr-5.c:102:12: warning - integer constant expression requried for array size
      int x2[sizeof(int [(int)(char *)0 + 2]) + (int)(char *)0];
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:103:29: warning - conversion between pointer and integer is not portable
      int x3[sizeof(int [(int)(char *)1]) + (int)(char *)1];
                              ^~~~~~~~~
./d-simp-intexpr-5.c:103:24: warning - conversion between pointer and integer is not portable
      int x3[sizeof(int [(int)(char *)1]) + (int)(char *)1];
                         ^~~~~~~~~~~~~~
./d-simp-intexpr-5.c:103:24: warning - integer constant expression requried for array size
      int x3[sizeof(int [(int)(char *)1]) + (int)(char *)1];
                         ^~~~~~~~~~~~~~
./d-simp-intexpr-5.c:103:48: warning - conversion between pointer and integer is not portable
      int x3[sizeof(int [(int)(char *)1]) + (int)(char *)1];
                                                 ^~~~~~~~~
./d-simp-intexpr-5.c:103:43: warning - conversion between pointer and integer is not portable
      int x3[sizeof(int [(int)(char *)1]) + (int)(char *)1];
                                            ^~~~~~~~~~~~~~
./d-simp-intexpr-5.c:103:12: warning - integer constant expression requried for array size
      int x3[sizeof(int [(int)(char *)1]) + (int)(char *)1];
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:105:24: warning - conversion between pointer and integer is not portable
      int x4[sizeof(int [(unsigned)(void *)0 + 1]) + (unsigned)(void *)0];
                         ^~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:105:24: warning - integer constant expression requried for array size
      int x4[sizeof(int [(unsigned)(void *)0 + 1]) + (unsigned)(void *)0];
                         ^~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:105:52: warning - conversion between pointer and integer is not portable
      int x4[sizeof(int [(unsigned)(void *)0 + 1]) + (unsigned)(void *)0];
                                                     ^~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:105:12: warning - integer constant expression requried for array size
      int x4[sizeof(int [(unsigned)(void *)0 + 1]) + (unsigned)(void *)0];
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:106:24: warning - conversion between pointer and integer is not portable
      int x5[sizeof(int [(unsigned)(char *)0 + 2]) + (unsigned)(char *)0];
                         ^~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:106:24: warning - integer constant expression requried for array size
      int x5[sizeof(int [(unsigned)(char *)0 + 2]) + (unsigned)(char *)0];
                         ^~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:106:52: warning - conversion between pointer and integer is not portable
      int x5[sizeof(int [(unsigned)(char *)0 + 2]) + (unsigned)(char *)0];
                                                     ^~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:106:12: warning - integer constant expression requried for array size
      int x5[sizeof(int [(unsigned)(char *)0 + 2]) + (unsigned)(char *)0];
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:107:34: warning - conversion between pointer and integer is not portable
      int x6[sizeof(int [(unsigned)(char *)1]) + (unsigned)(char *)1];
                                   ^~~~~~~~~
./d-simp-intexpr-5.c:107:24: warning - conversion between pointer and integer is not portable
      int x6[sizeof(int [(unsigned)(char *)1]) + (unsigned)(char *)1];
                         ^~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:107:24: warning - integer constant expression requried for array size
      int x6[sizeof(int [(unsigned)(char *)1]) + (unsigned)(char *)1];
                         ^~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:107:58: warning - conversion between pointer and integer is not portable
      int x6[sizeof(int [(unsigned)(char *)1]) + (unsigned)(char *)1];
                                                           ^~~~~~~~~
./d-simp-intexpr-5.c:107:48: warning - conversion between pointer and integer is not portable
      int x6[sizeof(int [(unsigned)(char *)1]) + (unsigned)(char *)1];
                                                 ^~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:107:12: warning - integer constant expression requried for array size
      int x6[sizeof(int [(unsigned)(char *)1]) + (unsigned)(char *)1];
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:110:25: warning - conversion between pointer and integer is not portable
          A = sizeof(int [(char *)1 - (char *)0]) + ((char *)1 - (char *)0),
                          ^~~~~~~~~
./d-simp-intexpr-5.c:110:25: warning - integer constant expression requried for array size
          A = sizeof(int [(char *)1 - (char *)0]) + ((char *)1 - (char *)0),
                          ^~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:110:52: warning - conversion between pointer and integer is not portable
          A = sizeof(int [(char *)1 - (char *)0]) + ((char *)1 - (char *)0),
                                                     ^~~~~~~~~
./d-simp-intexpr-5.c:110:13: warning - integer constant expression requried for enum constant
          A = sizeof(int [(char *)1 - (char *)0]) + ((char *)1 - (char *)0),
              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:111:27: warning - conversion between pointer and integer is not portable
          B = sizeof(int [!!(char *)1]) + !(char *)1,
                            ^~~~~~~~~
./d-simp-intexpr-5.c:111:25: warning - integer constant expression requried for array size
          B = sizeof(int [!!(char *)1]) + !(char *)1,
                          ^~~~~~~~~~~
./d-simp-intexpr-5.c:111:42: warning - conversion between pointer and integer is not portable
          B = sizeof(int [!!(char *)1]) + !(char *)1,
                                           ^~~~~~~~~
./d-simp-intexpr-5.c:111:13: warning - integer constant expression requried for enum constant
          B = sizeof(int [!!(char *)1]) + !(char *)1,
              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:112:26: warning - conversion between pointer and integer is not portable
          C = sizeof(int [((char *)1 && (char *)0)+1]) + ((char *)1 && (char *)0),
                           ^~~~~~~~~
./d-simp-intexpr-5.c:112:25: warning - integer constant expression requried for array size
          C = sizeof(int [((char *)1 && (char *)0)+1]) + ((char *)1 && (char *)0),
                          ^~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:112:57: warning - conversion between pointer and integer is not portable
          C = sizeof(int [((char *)1 && (char *)0)+1]) + ((char *)1 && (char *)0),
                                                          ^~~~~~~~~
./d-simp-intexpr-5.c:112:13: warning - integer constant expression requried for enum constant
          C = sizeof(int [((char *)1 && (char *)0)+1]) + ((char *)1 && (char *)0),
              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:113:25: warning - conversion between pointer and integer is not portable
          D = sizeof(int [(char *)1 || (char *)0]) + ((char *)1 || (char *)0),
                          ^~~~~~~~~
./d-simp-intexpr-5.c:113:25: warning - integer constant expression requried for array size
          D = sizeof(int [(char *)1 || (char *)0]) + ((char *)1 || (char *)0),
                          ^~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:113:53: warning - conversion between pointer and integer is not portable
          D = sizeof(int [(char *)1 || (char *)0]) + ((char *)1 || (char *)0),
                                                      ^~~~~~~~~
./d-simp-intexpr-5.c:113:13: warning - integer constant expression requried for enum constant
          D = sizeof(int [(char *)1 || (char *)0]) + ((char *)1 || (char *)0),
              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:114:26: warning - conversion between pointer and integer is not portable
          E = sizeof(int [((char *)1 == (char *)0)+1]) + ((char *)1 == (char *)0),
                           ^~~~~~~~~
./d-simp-intexpr-5.c:114:25: warning - integer constant expression requried for array size
          E = sizeof(int [((char *)1 == (char *)0)+1]) + ((char *)1 == (char *)0),
                          ^~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:114:57: warning - conversion between pointer and integer is not portable
          E = sizeof(int [((char *)1 == (char *)0)+1]) + ((char *)1 == (char *)0),
                                                          ^~~~~~~~~
./d-simp-intexpr-5.c:114:13: warning - integer constant expression requried for enum constant
          E = sizeof(int [((char *)1 == (char *)0)+1]) + ((char *)1 == (char *)0),
              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:115:25: warning - conversion between pointer and integer is not portable
          F = sizeof(int [(char *)1 != (char *)0]) + ((char *)1 != (char *)0)
                          ^~~~~~~~~
./d-simp-intexpr-5.c:115:25: warning - integer constant expression requried for array size
          F = sizeof(int [(char *)1 != (char *)0]) + ((char *)1 != (char *)0)
                          ^~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:115:53: warning - conversion between pointer and integer is not portable
          F = sizeof(int [(char *)1 != (char *)0]) + ((char *)1 != (char *)0)
                                                      ^~~~~~~~~
./d-simp-intexpr-5.c:115:13: warning - integer constant expression requried for enum constant
          F = sizeof(int [(char *)1 != (char *)0]) + ((char *)1 != (char *)0)
              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:119:33: warning - conversion between pointer and integer is not portable
          unsigned  : sizeof(int [(char *)1 >  (char *)0]) + ((char *)1 >  (char *)0);
                                  ^~~~~~~~~
./d-simp-intexpr-5.c:119:33: warning - integer constant expression requried for array size
          unsigned  : sizeof(int [(char *)1 >  (char *)0]) + ((char *)1 >  (char *)0);
                                  ^~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:119:61: warning - conversion between pointer and integer is not portable
          unsigned  : sizeof(int [(char *)1 >  (char *)0]) + ((char *)1 >  (char *)0);
                                                              ^~~~~~~~~
./d-simp-intexpr-5.c:119:21: warning - integer constant expression requried for bit-field size
          unsigned  : sizeof(int [(char *)1 >  (char *)0]) + ((char *)1 >  (char *)0);
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:120:33: warning - conversion between pointer and integer is not portable
          unsigned b: sizeof(int [(char *)1 >= (char *)0]) + ((char *)1 >= (char *)0);
                                  ^~~~~~~~~
./d-simp-intexpr-5.c:120:33: warning - integer constant expression requried for array size
          unsigned b: sizeof(int [(char *)1 >= (char *)0]) + ((char *)1 >= (char *)0);
                                  ^~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:120:61: warning - conversion between pointer and integer is not portable
          unsigned b: sizeof(int [(char *)1 >= (char *)0]) + ((char *)1 >= (char *)0);
                                                              ^~~~~~~~~
./d-simp-intexpr-5.c:120:21: warning - integer constant expression requried for bit-field size
          unsigned b: sizeof(int [(char *)1 >= (char *)0]) + ((char *)1 >= (char *)0);
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:124:27: warning - conversion between pointer and integer is not portable
          case sizeof(int [((char *)1 <  (char *)0)+1]) + ((char *)1 <  (char *)0):      break;
                            ^~~~~~~~~
./d-simp-intexpr-5.c:124:26: warning - integer constant expression requried for array size
          case sizeof(int [((char *)1 <  (char *)0)+1]) + ((char *)1 <  (char *)0):      break;
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:124:58: warning - conversion between pointer and integer is not portable
          case sizeof(int [((char *)1 <  (char *)0)+1]) + ((char *)1 <  (char *)0):      break;
                                                           ^~~~~~~~~
./d-simp-intexpr-5.c:124:14: warning - integer constant expression requried for case label
          case sizeof(int [((char *)1 <  (char *)0)+1]) + ((char *)1 <  (char *)0):      break;
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:125:27: warning - conversion between pointer and integer is not portable
          case sizeof(int [((char *)1 <= (char *)0)+1]) + 10 + ((char *)1 <= (char *)0): break;
                            ^~~~~~~~~
./d-simp-intexpr-5.c:125:26: warning - integer constant expression requried for array size
          case sizeof(int [((char *)1 <= (char *)0)+1]) + 10 + ((char *)1 <= (char *)0): break;
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:125:63: warning - conversion between pointer and integer is not portable
          case sizeof(int [((char *)1 <= (char *)0)+1]) + 10 + ((char *)1 <= (char *)0): break;
                                                                ^~~~~~~~~
./d-simp-intexpr-5.c:125:14: warning - integer constant expression requried for case label
          case sizeof(int [((char *)1 <= (char *)0)+1]) + 10 + ((char *)1 <= (char *)0): break;
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:127:27: warning - conversion between pointer and integer is not portable
          case sizeof(int [((void *)1)? 10: 0]) + 20 + (((void *)1)? 10: 0):                 break;
                            ^~~~~~~~~
./d-simp-intexpr-5.c:127:26: warning - integer constant expression requried for array size
          case sizeof(int [((void *)1)? 10: 0]) + 20 + (((void *)1)? 10: 0):                 break;
                           ^~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:127:56: warning - conversion between pointer and integer is not portable
          case sizeof(int [((void *)1)? 10: 0]) + 20 + (((void *)1)? 10: 0):                 break;
                                                         ^~~~~~~~~
./d-simp-intexpr-5.c:127:14: warning - integer constant expression requried for case label
          case sizeof(int [((void *)1)? 10: 0]) + 20 + (((void *)1)? 10: 0):                 break;
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:128:27: warning - conversion between pointer and integer is not portable
          case sizeof(int [((int)((1)? 0: (void *)0))+1]) + 30 + ((int)((1)? 0: (void *)0)): break;
                            ^~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:128:26: warning - integer constant expression requried for array size
          case sizeof(int [((int)((1)? 0: (void *)0))+1]) + 30 + ((int)((1)? 0: (void *)0)): break;
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:128:65: warning - conversion between pointer and integer is not portable
          case sizeof(int [((int)((1)? 0: (void *)0))+1]) + 30 + ((int)((1)? 0: (void *)0)): break;
                                                                  ^~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:128:14: warning - integer constant expression requried for case label
          case sizeof(int [((int)((1)? 0: (void *)0))+1]) + 30 + ((int)((1)? 0: (void *)0)): break;
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:129:27: warning - conversion between pointer and integer is not portable
          case sizeof(int [((int)((1)? (void *)0: 0))+1]) + 40 + ((int)((1)? (void *)0: 0)): break;
                            ^~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:129:26: warning - integer constant expression requried for array size
          case sizeof(int [((int)((1)? (void *)0: 0))+1]) + 40 + ((int)((1)? (void *)0: 0)): break;
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:129:65: warning - conversion between pointer and integer is not portable
          case sizeof(int [((int)((1)? (void *)0: 0))+1]) + 40 + ((int)((1)? (void *)0: 0)): break;
                                                                  ^~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:129:14: warning - integer constant expression requried for case label
          case sizeof(int [((int)((1)? (void *)0: 0))+1]) + 40 + ((int)((1)? (void *)0: 0)): break;
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:130:36: warning - conversion between pointer and integer is not portable
          case sizeof(int [(1)? (int)(void *)70: 0]) + 50 + ((1)? (int)(void *)70: 0):       break;
                                     ^~~~~~~~~~
./d-simp-intexpr-5.c:130:31: warning - conversion between pointer and integer is not portable
          case sizeof(int [(1)? (int)(void *)70: 0]) + 50 + ((1)? (int)(void *)70: 0):       break;
                                ^~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:130:26: warning - integer constant expression requried for array size
          case sizeof(int [(1)? (int)(void *)70: 0]) + 50 + ((1)? (int)(void *)70: 0):       break;
                           ^~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:130:70: warning - conversion between pointer and integer is not portable
          case sizeof(int [(1)? (int)(void *)70: 0]) + 50 + ((1)? (int)(void *)70: 0):       break;
                                                                       ^~~~~~~~~~
./d-simp-intexpr-5.c:130:65: warning - conversion between pointer and integer is not portable
          case sizeof(int [(1)? (int)(void *)70: 0]) + 50 + ((1)? (int)(void *)70: 0):       break;
                                                                  ^~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:130:14: warning - integer constant expression requried for case label
          case sizeof(int [(1)? (int)(void *)70: 0]) + 50 + ((1)? (int)(void *)70: 0):       break;
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:134:27: warning - conversion between pointer and integer is not portable
          case sizeof(int [((unsigned)((1)? 0: (void *)0))+1]) + 30 + ((unsigned)((1)? 0: (void *)0)): break;
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:134:26: warning - integer constant expression requried for array size
          case sizeof(int [((unsigned)((1)? 0: (void *)0))+1]) + 30 + ((unsigned)((1)? 0: (void *)0)): break;
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:134:70: warning - conversion between pointer and integer is not portable
          case sizeof(int [((unsigned)((1)? 0: (void *)0))+1]) + 30 + ((unsigned)((1)? 0: (void *)0)): break;
                                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:134:14: warning - integer constant expression requried for case label
          case sizeof(int [((unsigned)((1)? 0: (void *)0))+1]) + 30 + ((unsigned)((1)? 0: (void *)0)): break;
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:135:27: warning - conversion between pointer and integer is not portable
          case sizeof(int [((unsigned)((1)? (void *)0: 0))+1]) + 40 + ((unsigned)((1)? (void *)0: 0)): break;
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:135:26: warning - integer constant expression requried for array size
          case sizeof(int [((unsigned)((1)? (void *)0: 0))+1]) + 40 + ((unsigned)((1)? (void *)0: 0)): break;
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:135:70: warning - conversion between pointer and integer is not portable
          case sizeof(int [((unsigned)((1)? (void *)0: 0))+1]) + 40 + ((unsigned)((1)? (void *)0: 0)): break;
                                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:135:14: warning - integer constant expression requried for case label
          case sizeof(int [((unsigned)((1)? (void *)0: 0))+1]) + 40 + ((unsigned)((1)? (void *)0: 0)): break;
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:136:41: warning - conversion between pointer and integer is not portable
          case sizeof(int [(1)? (unsigned)(void *)70: 0]) + 50 + ((1)? (unsigned)(void *)70: 0):       break;
                                          ^~~~~~~~~~
./d-simp-intexpr-5.c:136:31: warning - conversion between pointer and integer is not portable
          case sizeof(int [(1)? (unsigned)(void *)70: 0]) + 50 + ((1)? (unsigned)(void *)70: 0):       break;
                                ^~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:136:26: warning - integer constant expression requried for array size
          case sizeof(int [(1)? (unsigned)(void *)70: 0]) + 50 + ((1)? (unsigned)(void *)70: 0):       break;
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:136:80: warning - conversion between pointer and integer is not portable
          case sizeof(int [(1)? (unsigned)(void *)70: 0]) + 50 + ((1)? (unsigned)(void *)70: 0):       break;
                                                                                 ^~~~~~~~~~
./d-simp-intexpr-5.c:136:70: warning - conversion between pointer and integer is not portable
          case sizeof(int [(1)? (unsigned)(void *)70: 0]) + 50 + ((1)? (unsigned)(void *)70: 0):       break;
                                                                       ^~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:136:14: warning - integer constant expression requried for case label
          case sizeof(int [(1)? (unsigned)(void *)70: 0]) + 50 + ((1)? (unsigned)(void *)70: 0):       break;
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:140:28: warning - conversion between pointer and integer is not portable
          int y1[sizeof(int [(unsigned)(&((struct m *)0)->y)]) +
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:140:28: warning - integer constant expression requried for array size
          int y1[sizeof(int [(unsigned)(&((struct m *)0)->y)]) +
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:141:16: warning - conversion between pointer and integer is not portable
                 (unsigned)(&((struct m *)0)->y)];    /* offsetof */
                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:140:16: warning - integer constant expression requried for array size
          int y1[sizeof(int [(unsigned)(&((struct m *)0)->y)]) +
                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:142:28: warning - conversion between pointer and integer is not portable
          int y2[sizeof(int [(int)(&((struct m *)0)->y)]) +
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:142:28: warning - integer constant expression requried for array size
          int y2[sizeof(int [(int)(&((struct m *)0)->y)]) +
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:143:16: warning - conversion between pointer and integer is not portable
                 (int)(&((struct m *)0)->y)];    /* offsetof */
                 ^~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:142:16: warning - integer constant expression requried for array size
          int y2[sizeof(int [(int)(&((struct m *)0)->y)]) +
                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./d-simp-intexpr-5.c:142:13: warning - local `y2' defined but not referenced
          int y2[sizeof(int [(int)(&((struct m *)0)->y)]) +
              ^~
./d-simp-intexpr-5.c:140:13: warning - local `y1' defined but not referenced
          int y1[sizeof(int [(unsigned)(&((struct m *)0)->y)]) +
              ^~
./d-simp-intexpr-5.c:107:9: warning - local `x6' defined but not referenced
      int x6[sizeof(int [(unsigned)(char *)1]) + (unsigned)(char *)1];
          ^~
./d-simp-intexpr-5.c:106:9: warning - local `x5' defined but not referenced
      int x5[sizeof(int [(unsigned)(char *)0 + 2]) + (unsigned)(char *)0];
          ^~
./d-simp-intexpr-5.c:105:9: warning - local `x4' defined but not referenced
      int x4[sizeof(int [(unsigned)(void *)0 + 1]) + (unsigned)(void *)0];
          ^~
./d-simp-intexpr-5.c:103:9: warning - local `x3' defined but not referenced
      int x3[sizeof(int [(int)(char *)1]) + (int)(char *)1];
          ^~
./d-simp-intexpr-5.c:102:9: warning - local `x2' defined but not referenced
      int x2[sizeof(int [(int)(char *)0 + 2]) + (int)(char *)0];
          ^~
./d-simp-intexpr-5.c:101:9: warning - local `x1' defined but not referenced
      int x1[sizeof(int [(int)(void *)0 + 1]) + (int)(void *)0];
          ^~
