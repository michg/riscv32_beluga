./d-expr-prim-1.c:1:52: warning - expression result not used
  void f1(void) { extern double f2_3(void); char *x; 1; 3.14; x = "abcd"; }
                                                     ^
./d-expr-prim-1.c:1:55: warning - expression result not used
  void f1(void) { extern double f2_3(void); char *x; 1; 3.14; x = "abcd"; }
                                                        ^~~~
./d-expr-prim-1.c:1:49: warning - local `x' set but not used
  void f1(void) { extern double f2_3(void); char *x; 1; 3.14; x = "abcd"; }
                                                  ^
./d-expr-prim-1.c:2:28: warning - implicit declaration of a function
  void f2(void) { int x; x = f2_2(); x = f2_3(); }
                             ^~~~~
./d-expr-prim-1.c:2:28: warning - missing prototype from `f2_2'
  void f2(void) { int x; x = f2_2(); x = f2_3(); }
                             ^~~~~
./d-expr-prim-1.c:2:40: warning - implicit declaration of a function
  void f2(void) { int x; x = f2_2(); x = f2_3(); }
                                         ^~~~~
./d-expr-prim-1.c:2:40: warning - missing prototype from `f2_3'
  void f2(void) { int x; x = f2_2(); x = f2_3(); }
                                         ^~~~~
./d-expr-prim-1.c:2:40: warning - inconsistent declaration of `f2_3': `function() returning int' vs `function(void) returning double'
  void f2(void) { int x; x = f2_2(); x = f2_3(); }
                                         ^~~~~
./d-expr-prim-1.c:1:31: note - previous declaration was here
  void f1(void) { extern double f2_3(void); char *x; 1; 3.14; x = "abcd"; }
                                ^~~~
./d-expr-prim-1.c:2:21: warning - local `x' set but not used
  void f2(void) { int x; x = f2_2(); x = f2_3(); }
                      ^
./d-expr-prim-1.c:3:27: ERROR - undeclared identifier `x3'
  void f3(void) { int *x = &x3; }
                            ^~
./d-expr-prim-1.c:4:38: warning - local `x' set but not used
  enum { X4 = 1 }; void f4(void) { int x; x = X4; }
                                       ^
./d-expr-prim-1.c:5:44: ERROR - illegal use of type name `x5'
  void f5(void) { typedef int x5; int x; x = x5; }
                                             ^~
./d-expr-prim-1.c:6:27: ERROR - expression required
  void f6(void) { int x; x = int; }
                            ^
./d-expr-prim-1.c:7:25: ERROR - expression required
  void f7(void) { 1 / (1 - if); }
                          ^
./d-expr-prim-1.c:8:34: ERROR - expression required
  void f8(void) { if (1 * (1 / (1 - if)) + 1) return; }
                                   ^
./d-expr-prim-1.c:9:32: ERROR - expression required
  void f9(void) { while (1 * (1 / )); }
                                 ^
./d-expr-prim-1.c:9:35: warning - empty body to a `while' statement can be misleading
  void f9(void) { while (1 * (1 / )); }
                                    ^
./d-expr-prim-1.c:10:20: warning - empty body to a `do' statement can be misleading
  void f10(void) { do; while((1 / ) * 1); }
                     ^
./d-expr-prim-1.c:10:32: ERROR - expression required
  void f10(void) { do; while((1 / ) * 1); }
                                 ^
./d-expr-prim-1.c:11:30: ERROR - expression required
  void f11(void) { for (1 / (1-if); (1 / (1-; 1 / (1-); }
                               ^
./d-expr-prim-1.c:11:43: ERROR - expression required
  void f11(void) { for (1 / (1-if); (1 / (1-; 1 / (1-); }
                                            ^
./d-expr-prim-1.c:11:43: ERROR - syntax error; expected `)' before `;'
  void f11(void) { for (1 / (1-if); (1 / (1-; 1 / (1-); }
                                            ^
./d-expr-prim-1.c:11:40: note - to match this `('
  void f11(void) { for (1 / (1-if); (1 / (1-; 1 / (1-); }
                                         ^
./d-expr-prim-1.c:11:43: ERROR - syntax error; expected `)' before `;'
  void f11(void) { for (1 / (1-if); (1 / (1-; 1 / (1-); }
                                            ^
./d-expr-prim-1.c:11:35: note - to match this `('
  void f11(void) { for (1 / (1-if); (1 / (1-; 1 / (1-); }
                                    ^
./d-expr-prim-1.c:11:52: ERROR - expression required
  void f11(void) { for (1 / (1-if); (1 / (1-; 1 / (1-); }
                                                     ^
./d-expr-prim-1.c:11:53: ERROR - syntax error; expected `)' before `;'
  void f11(void) { for (1 / (1-if); (1 / (1-; 1 / (1-); }
                                                      ^
./d-expr-prim-1.c:11:22: note - to match this `('
  void f11(void) { for (1 / (1-if); (1 / (1-; 1 / (1-); }
                       ^
./d-expr-prim-1.c:11:53: warning - empty body to a `for' statement can be misleading
  void f11(void) { for (1 / (1-if); (1 / (1-; 1 / (1-); }
                                                      ^
./d-expr-prim-1.c:12:32: ERROR - expression required
  void f12(void) { switch(1 / (1-{)) { case 1 / (1-case): ; } }
                                 ^
./d-expr-prim-1.c:12:50: ERROR - expression required
  void f12(void) { switch(1 / (1-{)) { case 1 / (1-case): ; } }
                                                   ^
./d-expr-prim-1.c:13:31: ERROR - expression required
  int f13(void) { return 1 / (1-return); }
                                ^
./d-expr-prim-1.c:14:16: ERROR - initializer is not allowed for parameter
  void f14(int x = 1 / (1-int)) {}
                 ^
./d-expr-prim-1.c:14:25: ERROR - expression required
  void f14(int x = 1 / (1-int)) {}
                          ^
./d-expr-prim-1.c:15:35: ERROR - expression required
  void f15(void) { int x = { 1 / (1-) }; int y = 1 / (1-void); }
                                    ^
./d-expr-prim-1.c:15:55: ERROR - expression required
  void f15(void) { int x = { 1 / (1-) }; int y = 1 / (1-void); }
                                                        ^
./d-expr-prim-1.c:16:47: ERROR - expression required
  void f16(void) { char c[] = { 0, 1, 2, 1 / (1-char), 3, 4 }; }
                                                ^
./d-expr-prim-1.c:17:21: ERROR - expression required
  int x17 = 1 / (1 - &);
                      ^
./d-expr-prim-1.c:18:31: ERROR - expression required
  void f18(void) { int x[1 / (1-[])]; }
                                ^
./d-expr-prim-1.c:18:32: ERROR - expression required
  void f18(void) { int x[1 / (1-[])]; }
                                 ^
./d-expr-prim-1.c:19:41: ERROR - expression required
  void f19(void) { struct { int x: 1 / (1-default); int y; } z; }
                                          ^
./d-expr-prim-1.c:19:32: warning - signedness of plain bit-field is implementation-defined
  void f19(void) { struct { int x: 1 / (1-default); int y; } z; }
                            ~~~  ^
./d-expr-prim-1.c:20:26: ERROR - expression required
  enum { A = 0, B = 1 / (1-enum), C, D };
                           ^
./d-expr-prim-1.c:21:18: warning - implicit declaration of a function
  void f20(void) { f(0, f(f(1 / (1-[]), 2), 3)); }
                   ^~
./d-expr-prim-1.c:21:18: warning - missing prototype from `f'
  void f20(void) { f(0, f(f(1 / (1-[]), 2), 3)); }
                   ^~
./d-expr-prim-1.c:21:34: ERROR - expression required
  void f20(void) { f(0, f(f(1 / (1-[]), 2), 3)); }
                                   ^
./d-expr-prim-1.c:21:35: ERROR - expression required
  void f20(void) { f(0, f(f(1 / (1-[]), 2), 3)); }
                                    ^
