/*
 *  token definitions;
 *  ASSUMPTION: 7-bit ASCII or its superset for the source character set
 */


/* ASCII         enum  code prec     op     tree-func   token-set       string    need-sp */
/* NUL */  yy(0,          0,  0, 0,        0,         0,            0,                    0)
/* (TY_FLOAT == LEX_FLOAT) must come first; see sym.c */
/* SOH */  kk(FLOAT,      1,  0, 0,        0,         LEX_CHAR,     "float",              0)
/* STX */  kk(DOUBLE,     2,  0, 0,        0,         LEX_CHAR,     "double",             0)
/* ETX */  xx(LDOUBLE,    3,  0, 0,        0,         0,            0,                    0)
/* integer types must be in the incresing order of conversion ranks; see binary() */
/* EQT */  kk(CHAR,       4,  0, 0,        0,         LEX_CHAR,     "char",               0)
/* ENQ */  kk(SHORT,      5,  0, 0,        0,         LEX_CHAR,     "short",              0)
/* ACK */  kk(INT,        6,  0, 0,        0,         LEX_CHAR,     "int",                0)
/* BEL */  kk(ENUM,       7,  0, 0,        0,         LEX_CHAR,     "enum",               0)
/* BS  */  kk(UNSIGNED,   8,  0, 0,        0,         LEX_CHAR,     "unsigned",           0)
/* HT  */  kk(LONG,       9,  0, 0,        0,         LEX_CHAR,     "long",               0)
/* NL  */  xx(ULONG,     10,  0, 0,        0,         0,            0,                    0)
#ifdef SUPPORT_LL
/* VT  */  xx(LLONG,     11,  0, 0,        0,         0,            "long long",          0)
/* FF */   xx(ULLONG,    12,  0, 0,        0,         0,            0,                    0)
#else    /* !SUPPORT_LL */
/* VT */   yy(0,         11,  0, 0,        0,         0,            0,                    0)
/* FF */   yy(0,         12,  0, 0,        0,         0,            0,                    0)
#endif    /* SUPPORT_LL */
/* (LEX_FLOAT ~ LEX_ULONG|LEX_ULLONG) must be sequential; see enode_cast() */
/* CR  */  xx(POINTER,   13,  0, 0,        0,         0,            0,                    0)
/* SO  */  kk(VOID,      14,  0, 0,        0,         LEX_CHAR,     "void",               0)
/* SI  */  kk(STRUCT,    15,  0, 0,        0,         LEX_CHAR,     "struct",             0)
/* (LEX_FLOAT ~ LEX_STRUCT) must be below 16; see op.h */
/* DLE */  kk(UNION,     16,  0, 0,        0,         LEX_CHAR,     "union",              0)
/* DC1 */  xx(FUNCTION,  17,  0, 0,        0,         0,            0,                    0)
/* DC2 */  xx(ARRAY,     18,  0, 0,        0,         0,            0,                    0)
/* (TY_ARRAY == LEX_ARRAY) must be the last and < (TY_CONST == LEX_CONST); see ty.h and sym.c */
/* DC3 */  yy(0,         19,  0, 0,        0,         0,            0,                    0)
/* DC4 */  xx(CREM,      20,  2, OP_CMOD,  tree_bit,  '=',          "%=",                 2)
/* NAK */  xx(CBAND,     21,  2, OP_CBAND, tree_bit,  '=',          "&=",                 2)
/* SYN */  xx(CMUL,      22,  2, OP_CMUL,  tree_mul,  '=',          "*=",                 2)
/* ETB */  xx(CADD,      23,  2, OP_CADD,  tree_add,  '=',          "+=",                 2)
/* CAN */  xx(CSUB,      24,  2, OP_CSUB,  tree_sub,  '=',          "-=",                 2)
/* EN  */  xx(CDIV,      25,  2, OP_CDIV,  tree_mul,  '=',          "/=",                 2)
/* SUB */  xx(CRSHFT,    26,  2, OP_CRSH,  tree_sh,   '=',          ">>=",                2)
/* ESC */  xx(CLSHFT,    27,  2, OP_CLSH,  tree_sh,   '=',          "<<=",                2)
/* FS  */  xx(CBXOR,     28,  2, OP_CBXOR, tree_bit,  '=',          "^=",                 0)
/* GS  */  xx(CBOR,      29,  2, OP_CBOR,  tree_bit,  '=',          "|=",                 2)
/* RS  */  xx(ID,        30,  0, 0,        0,         LEX_ID,       "identifier",         3)
/* US  */  xx(CCON,      31,  0, 0,        0,         LEX_ID,       "character constant", 2)
/* (TY_CONST == LEX_CONST) must be a power of 2 and > (TY_ARRAY == LEX_ARRAY) */
/* SP  */  kk(CONST,     32,  0, 0,        0,         LEX_CHAR,     "const",              0)
/*  !  */  yy(0,         33,  0, 0,        0,         LEX_ID,       "!",                  1)
/*  "  */  xx(FCON,      34,  0, 0,        0,         LEX_ID,       "floating constant",  3)
/*  #  */  xx(ICON,      35,  0, 0,        0,         LEX_ID,       "integer constant",   3)
/*  $  */  xx(SCON,      36,  0, 0,        0,         LEX_ID,       "string literal",     2)
/*  %  */  yy(0,         37, 13, OP_MOD,   tree_bit,  '%',          "%",                  3)
/*  &  */  yy(0,         38,  8, OP_BAND,  tree_bit,  LEX_ID,       "&",                  3)
/*  '  */  xx(INCR,      39,  0, OP_INCR,  tree_add,  LEX_ID,       "++",                 2)
/*  (  */  yy(0,         40,  0, 0,        0,         LEX_ID,       "(",                  0)
/*  )  */  yy(0,         41,  0, 0,        0,         ')',          ")",                  0)
/*  *  */  yy(0,         42, 13, OP_MUL,   tree_mul,  LEX_ID,       "*",                  3)
/*  +  */  yy(0,         43, 12, OP_ADD,   tree_add,  LEX_ID,       "+",                  3)
/*  ,  */  yy(0,         44,  1, 0,        0,         ',',          ",",                  0)
/*  -  */  yy(3,         45, 12, OP_SUB,   tree_sub,  LEX_ID,       "-",                  3)
/*  .  */  yy(0,         46,  0, 0,        0,         '.',          ".",                  3)
/*  /  */  yy(0,         47, 13, OP_DIV,   tree_mul,  '/',          "/",                  3)
/*  0  */  xx(DECR,      48,  0, OP_DECR,  tree_sub,  LEX_ID,       "--",                 2)
/*  1  */  xx(DEREF,     49,  0, 0,        0,         LEX_DEREF,    "->",                 2)
/*  2  */  xx(ANDAND,    50,  5, OP_AND,   tree_and,  LEX_ANDAND,   "&&",                 2)
/*  3  */  xx(OROR,      51,  4, OP_OR,    tree_and,  LEX_OROR,     "||",                 2)
/*  4  */  xx(LEQ,       52, 10, OP_LE,    tree_cmp,  LEX_LEQ,      "<=",                 2)
/*  5  */  xx(EQEQ,      53,  9, OP_EQ,    tree_cmp,  LEX_EQEQ,     "==",                 2)
/*  6  */  xx(NEQ,       54,  9, OP_NE,    tree_cmp,  LEX_NEQ,      "!=",                 0)
/*  7  */  xx(GEQ,       55, 10, OP_GE,    tree_cmp,  LEX_GEQ,      ">=",                 2)
/*  8  */  xx(RSHFT,     56, 11, OP_RSH,   tree_sh,   LEX_RSHFT,    ">>",                 2)
/*  9  */  xx(LSHFT,     57, 11, OP_LSH,   tree_sh,   LEX_LSHFT,    "<<",                 2)
/*  :  */  yy(0,         58,  0, 0,        0,         ':',          ":",                  3)
/*  ;  */  yy(0,         59,  0, 0,        0,         LEX_IF,       ";",                  0)
/*  <  */  yy(0,         60, 10, OP_LT,    tree_cmp,  '<',          "<",                  3)
/*  =  */  yy(0,         61,  2, OP_ASGN,  tree_asgn, '=',          "=",                  3)
/*  >  */  yy(0,         62, 10, OP_GT,    tree_cmp,  '>',          ">",                  3)
/*  ?  */  yy(0,         63,  0, 0,        0,         '?',          "?",                  0)
/* (TY_VOLATILE == LEX_VOLATILE) must be a power of 2 and > (TY_CONST == LEX_CONST) */
/*  @  */  kk(VOLATILE,  64,  0, 0,        0,         LEX_CHAR,     "volatile",           0)
/*  A  */  xx(ELLIPSIS,  65,  0, 0,        0,         LEX_ELLIPSIS, "...",                2)
/*  B  */  kk(SIZEOF,    66,  0, 0,        0,         LEX_ID,       "sizeof",             0)
/*  C  */  yy(0,         67,  0, 0,        0,         0,            0,                    0)
/* LEX_AUTO must come first; see sym_new() */
/*  D  */  kk(AUTO,      68,  0, 0,        0,         LEX_STATIC,   "auto",               0)
/*  E  */  kk(EXTERN,    69,  0, 0,        0,         LEX_STATIC,   "extern",             0)
/*  F  */  kk(REGISTER,  70,  0, 0,        0,         LEX_STATIC,   "register",           0)
/*  G  */  kk(STATIC,    71,  0, 0,        0,         LEX_STATIC,   "static",             0)
/*  H  */  kk(TYPEDEF,   72,  0, 0,        0,         LEX_STATIC,   "typedef",            0)
/* LEX_TYPEDEF must be the last; see sym_new() */
/*  I  */  yy(0,         73,  0, 0,        0,         0,            0,                    0)
/*  J  */  kk(BREAK,     74,  0, 0,        0,         LEX_IF,       "break",              0)
/*  K  */  kk(CASE,      75,  0, 0,        0,         LEX_IF,       "case",               0)
/*  L  */  kk(CONTINUE,  76,  0, 0,        0,         LEX_IF,       "continue",           0)
/*  M  */  kk(DEFAULT,   77,  0, 0,        0,         LEX_IF,       "default",            0)
/*  N  */  kk(DO,        78,  0, 0,        0,         LEX_IF,       "do",                 0)
/*  O  */  kk(ELSE,      79,  0, 0,        0,         LEX_IF,       "else",               0)
/*  P  */  kk(FOR,       80,  0, 0,        0,         LEX_IF,       "for",                0)
/*  Q  */  kk(GOTO,      81,  0, 0,        0,         LEX_IF,       "goto",               0)
/*  R  */  kk(IF,        82,  0, 0,        0,         LEX_IF,       "if",                 0)
/*  S  */  kk(RETURN,    83,  0, 0,        0,         LEX_IF,       "return",             0)
/*  T  */  kk(SWITCH,    84,  0, 0,        0,         LEX_IF,       "switch",             0)
/*  U  */  kk(WHILE,     85,  0, 0,        0,         LEX_IF,       "while",              0)
/*  V  */  kk(SIGNED,    86,  0, 0,        0,         LEX_CHAR,     "signed",             0)
/*  W  */  yy(0,         87,  0, 0,        0,         0,            0,                    0)
/*  X  */  yy(0,         88,  0, 0,        0,         0,            0,                    0)
/*  Y  */  yy(0,         89,  0, 0,        0,         0,            0,                    0)
/*  Z  */  yy(0,         90,  0, 0,        0,         0,            0,                    0)
/*  [  */  yy(0,         91,  0, 0,        0,         '[',          "[",                  0)
/*  \  */  yy(0,         92,  0, 0,        0,         0,            0,                    0)
/*  ]  */  yy(0,         93,  0, 0,        0,         ']',          "]",                  0)
/*  ^  */  yy(0,         94,  7, OP_BXOR,  tree_bit,  '^',          "^",                  1)
/*  _  */  yy(0,         95,  0, 0,        0,         0,            0,                    0)
/*  `  */  yy(0,         96,  0, 0,        0,         0,            0,                    0)
/*  a  */  xx(SHARP,     97,  0, 0,        0,         0,            "#",                  3)
/*  b  */  xx(DSHARP,    98,  0, 0,        0,         0,            "##",                 2)
/*  c  */  xx(STROP,     99,  0, 0,        0,         0,            "#",                  0)
/*  d  */  xx(PASTEOP,  100,  0, 0,        0,         0,            "##",                 0)
/*  e  */  xx(PPNUM,    101,  0, 0,        0,         0,            "pp-number",          3)
/*  f  */  xx(HEADER,   102,  0, 0,        0,         0,            "header name",        0)
/*  g  */  yy(0,        103,  0, 0,        0,         0,            0,                    0)
/*  h  */  yy(0,        104,  0, 0,        0,         0,            0,                    0)
/*  i  */  yy(0,        105,  0, 0,        0,         0,            0,                    0)
/*  j  */  yy(0,        106,  0, 0,        0,         0,            0,                    0)
/*  k  */  yy(0,        107,  0, 0,        0,         0,            0,                    0)
/*  l  */  yy(0,        108,  0, 0,        0,         0,            0,                    0)
/*  m  */  yy(0,        109,  0, 0,        0,         0,            0,                    0)
/*  n  */  yy(0,        110,  0, 0,        0,         0,            0,                    0)
/*  o  */  yy(0,        111,  0, 0,        0,         0,            0,                    0)
/*  p  */  yy(0,        112,  0, 0,        0,         0,            0,                    0)
/*  q  */  yy(0,        113,  0, 0,        0,         0,            0,                    0)
/*  r  */  yy(0,        114,  0, 0,        0,         0,            0,                    0)
/*  s  */  yy(0,        115,  0, 0,        0,         0,            0,                    0)
/*  t  */  yy(0,        116,  0, 0,        0,         0,            0,                    0)
/*  u  */  yy(0,        117,  0, 0,        0,         0,            0,                    0)
/*  v  */  yy(0,        118,  0, 0,        0,         0,            0,                    0)
/*  w  */  yy(0,        119,  0, 0,        0,         0,            0,                    0)
/*  x  */  yy(0,        120,  0, 0,        0,         0,            0,                    0)
/*  y  */  yy(0,        121,  0, 0,        0,         0,            0,                    0)
/*  z  */  yy(0,        122,  0, 0,        0,         0,            0,                    0)
/*  {  */  yy(0,        123,  0, 0,        0,         LEX_IF,       "{",                  0)
/*  |  */  yy(0,        124,  6, OP_BOR,   tree_bit,  '|',          "|",                  3)
/*  }  */  yy(0,        125,  0, 0,        0,         '}',          "}",                  0)
/*  ~  */  yy(0,        126,  0, OP_BCOM,  0,         LEX_ID,       "~",                  0)
/* DEL */  xx(EOI,      127,  0, 0,        0,         LEX_EOI,      "end of input",       0)
/* 128 */  xx(SPACE,    128,  0, 0,        0,         0,            "whitespace",         0)
/* 129 */  xx(NEWLINE,  129,  0, 0,        0,         0,            "end of line",        0)
/* 130 */  xx(UNKNOWN,  130,  0, 0,        0,         0,            "unknown token",      3)
/* 131 */  xx(MCR,      131,  0, 0,        0,         0,            "macro expansion",    0)

#undef xx
#undef kk
#undef yy

/* end of xtoken.h */
